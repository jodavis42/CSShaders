
namespace Test
{
  [Shader.UnitTest][Shader.Pixel]
  struct IfNested
  {
    int IfNested0()
    {
      var one = 1;
      var zero = 0;
      var i0 = 0;
      var i1 = 1;
      var r0 = 0;
      var r1 = 1;
    
      if(i0 == 0)
      {
        r0 = zero;
        if(i1 == 0)
          r1 = one;
        r0 = zero;
      }
      var result = r0 + r1;
      return result;
    }

    int IfNested1()
    {
      var one = 1;
      var zero = 0;
      var i0 = 0;
      var i1 = 1;
      var r0 = 0;
      var r1 = 1;
      if(i0 == zero)
      {
        r0 = zero;
        if(i1 > 0)
        {
          r1 = one;
        }
        else
        {
          r1 = zero;
        }
        r0 = zero;
      }
      var result = r0 + r1;
      return result;
    }

    int IfNested2()
    {
      var one = 1;
      var zero = 0;
      var nOne = -1;
      var i0 = 0;
      var i1 = 1;
      var r0 = 0;
      var r1 = 1;
    
      if(i0 == zero)
      {
        r0 = zero;
        if(i1 > 0)
        {
          r1 = one;
        }
        else if(i1 < 0)
        {
          r1 = nOne;
        }
        else
        {
          r1 = zero;
        }
        r0 = zero;
      }
      var result = r0 + r1;
      return result;
    }

    int IfNested3()
    {
      var one = 1;
      var zero = 0;
      var nOne = -1;
      var i0 = 0;
      var i1 = 1;
      var r0 = 0;
      var r1 = 1;
    
      if(i0 > 0)
      {
        r0 = one;
        if(i1 > 0)
        {
          r1 = one;
        }
        r0 = one;
      }
      else
      {
        r0 = zero;
        if(i1 > 0)
        {
          r1 = one;
        }
        r0 = zero;
      }
      var result = r0 + r1;
      return result;
    }

    int SuperNestedIf0()
    {
      var a = 0;
      if(true)
      {
        a = 1;
        if(false)
        {
          a = 2;
          if(a > 3)
            a = 3;
          a = 4;
        }
        a = 3;
      }
      ++a;
      return a;
    }

    [Shader.EntryPoint]
    public void Main()
    {
      var ret = 0;
      ret = this.IfNested0();
      ret = this.IfNested1();
      ret = this.IfNested2();
      ret = this.IfNested3();
      ret = this.SuperNestedIf0();
    }
  }
}

