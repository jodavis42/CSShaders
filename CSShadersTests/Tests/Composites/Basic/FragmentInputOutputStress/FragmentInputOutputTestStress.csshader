[Shader.Vertex]
public struct Vertex0
{
  // Out 1, InOut 2, In 3 (1->2->3)
  [Shader.FragmentOutput] public float Value1;
  // Out 1, In 2, In 3 (1->2; 1->3)
  [Shader.FragmentOutput] public float Value2;
  
  // None 1, In 2 (no match)
  public float Value3;
  // Out 1, None 2 (no match)
  [Shader.FragmentOutput] public float Value4;
  // Out 1, None 2, In 3 (1->3 match)
  [Shader.FragmentOutput] public float Value5;
  
  // Out 1 (R2), In 1 (R) (mismatched types)
  [Shader.FragmentOutput] public Math.Vector2 Value6;
  
  // Out 1, InOut 2, In 3 (1->2->3) (after other properties)
  [Shader.FragmentOutput] public float Value7;

  public void Main() {}
}
[Shader.Vertex]
public struct Vertex1
{
  // Out 1, InOut 2, In 3 (1->2->3)
  [Shader.FragmentInput][Shader.FragmentOutput] public float Value1;
  // Out 1, In 2, In 3 (1->2; 1->3)
  [Shader.FragmentInput] public float Value2;
  
  // None 1, In 2 (no match)
  [Shader.FragmentInput] public float Value3;
  // Out 1, None 2 (no match)
  public float Value4;
  // Out 1, None 2, In 3 (1->3 match)
  public float Value5;
  
  // Out 1 (R2), In 1 (R) (mismatched types)
  [Shader.FragmentInput] public float Value6;
  
  // Out 1, InOut 2, In 3 (1->2->3) (after other properties)
  [Shader.FragmentInput][Shader.FragmentOutput] public float Value7;

  public void Main() {}
}
[Shader.Vertex]
public struct Vertex2
{
  // Out 1, InOut 2, In 3 (1->2->3)
  [Shader.FragmentInput] public float Value1;
  // Out 1, In 2, In 3 (1->2; 1->3)
  [Shader.FragmentInput] public float Value2;
  
  // Out 1, None 2, In 3 (1->3 match)
  [Shader.FragmentInput] public float Value5;
  
  // Out 1, InOut 2, In 3 (1->2->3) (after other properties)
  [Shader.FragmentInput] public float Value7;

  public void Main() {}
}

[Shader.Pixel]
public struct Pixel0
{
  // Out 1, InOut 2, In 3 (1->2->3)
  [Shader.FragmentOutput] public float Value1;
  // Out 1, In 2, In 3 (1->2; 1->3)
  [Shader.FragmentOutput] public float Value2;
  
  // None 1, In 2 (no match)
  public float Value3;
  // Out 1, None 2 (no match)
  [Shader.FragmentOutput] public float Value4;
  // Out 1, None 2, In 3 (1->3 match)
  [Shader.FragmentOutput] public float Value5;
  
  // Out 1 (R2), In 1 (R) (mismatched types)
  [Shader.FragmentOutput] Math.Vector2 Value6;
  
  // Out 1, InOut 2, In 3 (1->2->3) (after other properties)
  [Shader.FragmentOutput] public float Value7;

  public void Main() {}
}
[Shader.Pixel]
public struct Pixel1
{
  // Out 1, InOut 2, In 3 (1->2->3)
  [Shader.FragmentInput][Shader.FragmentOutput] public float Value1;
  // Out 1, In 2, In 3 (1->2; 1->3)
  [Shader.FragmentInput] public float Value2;
  
  // None 1, In 2 (no match)
  [Shader.FragmentInput] public float Value3;
  // Out 1, None 2 (no match)
  public float Value4;
  // Out 1, None 2, In 3 (1->3 match)
  public float Value5;
  
  // Out 1 (R2), In 1 (R) (mismatched types)
  [Shader.FragmentInput] public float Value6;
  
  // Out 1, InOut 2, In 3 (1->2->3) (after other properties)
  [Shader.FragmentInput][Shader.FragmentOutput] public float Value7;

  public void Main() {}
}
[Shader.Pixel]
public struct Pixel2
{
  // Out 1, InOut 2, In 3 (1->2->3)
  [Shader.FragmentInput] public float Value1;
  // Out 1, In 2, In 3 (1->2; 1->3)
  [Shader.FragmentInput] public float Value2;
  
  // Out 1, None 2, In 3 (1->3 match)
  [Shader.FragmentInput] public float Value5;
  
  // Out 1, InOut 2, In 3 (1->2->3) (after other properties)
  [Shader.FragmentInput] public float Value7;

  public void Main() {}
}
